include "application"

play {
  server {
    pidfile.path = "/dev/null"
  }
  http.secret.key = "${APPLICATION_SECRET}"
}

sharding.state-store-mode = ddata

akka {
  discovery.method = akka-dns

  cluster {
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }

  management {
    cluster.bootstrap {
      contact-point-discovery {
        discovery-method = kubernetes-api
        service-name = "hello"
        required-contact-point-nr = ${REQUIRED_CONTACT_POINT_NR}
      }
    }
  }
}

lagom.cluster {
  join-self = on
  exit-jvm-when-system-terminated = on
  bootstrap.enabled = off
}

lagom.broker.kafka {
  service-name = ""
  brokers = ${KAFKA_BROKER_URL}
  client {
    default {
      failure-exponential-backoff {
        min = 3s
        max = 30s
        random-factor = 0.2
      }
    }
    producer = ${lagom.broker.kafka.client.default}
    producer.role = ""
    consumer {
      failure-exponential-backoff = ${lagom.broker.kafka.client.default.failure-exponential-backoff}
      offset-buffer = 100
      batching-size = 20
      batching-interval = 5 seconds
    }
  }
}

cassandra.default {
  ## list the contact points  here
  contact-points = [${CASSANDRA_URL}]
  ## override Lagomâ€™s ServiceLocator-based ConfigSessionProvider
  session-provider = akka.persistence.cassandra.ConfigSessionProvider
}

cassandra-journal {
  keyspace = ${hello.cassandra.keyspace}
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
}

cassandra-snapshot-store {
  keyspace = ${hello.cassandra.keyspace}
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
}

lagom.persistence.read-side.cassandra {
  keyspace = ${hello.cassandra.keyspace}
  contact-points = ${cassandra.default.contact-points}
  session-provider = ${cassandra.default.session-provider}
  keyspace-autocreate = true
}